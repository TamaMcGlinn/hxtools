#!/usr/bin/perl
#
#	gpsh
#	A script to start playing files from your music archive
#	by grepping on their filename, or title (in case of mixes).
#	released in the Public Domain
#	written by Jan Engelhardt, 2010
#
# -F	specifies index file to use
# -b	Force synchronous index rebuild
# -q	Try to be quiet
# -z	Disable shuffle
#
use Data::Dumper;
use File::Find::Rule;
use Getopt::Long;
use strict;
my $opt_quiet;

&main();

sub main
{
	my $opt_idxfile = "index.m9u",
	my $opt_shuffle = 1;
	my $rebuild_index;
	my $index;
	my $queue;

	$SIG{INT} = $SIG{QUIT} = sub { exit(0); };

	&Getopt::Long::Configure(qw(bundling pass_through));
	&GetOptions(
		"F" => \$opt_idxfile,
		"b" => \$rebuild_index,
		"z" => sub { $opt_shuffle = 0 },
		"q" => \$opt_quiet,
	);
	print "[$$] Main program\n";
	if (scalar(@ARGV) == 0) {
		@ARGV = ("");
	}

	if ($rebuild_index || !-e $opt_idxfile) {
		$index = &index_rebuild($opt_idxfile);
	} elsif (-M _ > 86400) {
		$index = &index_read($opt_idxfile);
		$queue = &queue_select($index, \@ARGV);
		# Avoid backgrounding if we have nothing to play
		if (scalar(@$queue) > 0) {
			&schedule(\&index_rebuild, $opt_idxfile);
		} else {
			&index_rebuild($opt_idxfile);
		}
	} else {
		$index = &index_read($opt_idxfile);
	}

	if (!defined($queue)) {
		$queue = &queue_select($index, \@ARGV);
	}
	if ($opt_shuffle) {
		@$queue = sort s_random @$queue;
	}
	&queue_play($queue);
}

sub basename
{
	my $s = shift @_;
	$s =~ s{.*/}{}s;
	return $s;
}

sub queue_select
{
	my($index, $argv) = @_;
	my $queue = [];

	print "[$$] Index has ", scalar(@$index), " entries\n";
	foreach my $arg (@$argv) {
		my @res = grep { $_->{title} =~ /$arg/i } @$index;
		foreach (@res) {
			print "[$$]   \\_ $_->{title} @ ",
				basename($_->{file}), ":$_->{ofs}\n";
			push(@$queue, $_);
		}
	}
	return $queue;
}

sub queue_play
{
	my $queue = shift @_;

	foreach my $entry (@$queue) {
		my $file = $entry->{file};
		my($ext) = ($file =~ /(\.[^\.]+)$/);
		$ext = lc $ext;

		if ($ext eq ".mid" || $ext eq ".mus" || $ext eq ".mod" ||
		    $ext eq ".669" || $ext eq ".s3m" || $ext eq ".xm" ||
		    $ext eq ".it") {
			my $t = $opt_quiet ? "" : "t";
			system "timidity", "-Os", "-id$t", $file;
		} elsif ($file eq ".umx") {
			&play_umx($file);
		} else {
			if (defined($entry->{vbr}) && $entry->{ofs} != 0) {
				$file = &workaround_mp3vbr($file);
			}
			system "mplayer", "-vo", "null",
				$file, "-ss", $entry->{ofs} - 1;
		}
		sleep(.3);
	}
}

sub workaround_mp3vbr
{
	# MPlayer cannot properly seek in MP3 VBR streams.
	# Create an index file...
	my $ifile = shift @_;
	my $ofile = $ifile;
	my $tmpdir = "/tmp/psh";

	$ofile =~ s{/}{__}gs;
	$ofile = "$tmpdir/$ofile";
	if (-e $ofile) {
		return $ofile;
	}
	if (!-e $tmpdir) {
		if (!mkdir($tmpdir)) {
			print "[$$] Could not create $tmpdir: $!\n";
			return $ifile;
		}
	}
	system "mkvmerge", "-o", $ofile, $ifile;
	return $ofile;
}

sub play_umx
{
	my $name = shift @_;
	my $buffer;

	if (!open(IN, "< $name")) {
		warn "[$$] Could not open $name: $!\n";
		return;
	}

	my $of = "/tmp/playmuch-$$.it";
	open(OUT, "> $of");
	read(IN, $buffer, 256);
	$buffer =~ s{^.*?(?=IMP|SCRM|Extended Module)}{}ogs;
	print OUT $buffer;
	while (read(IN, $buffer, 65536)) {
		print OUT $buffer;
	}
	close IN;
	close OUT;

	system "timidity", "-Os", "-id".($opt_quiet ? "" : "t"), $of;
	unlink $of;
}

#
# Run a sub in the background.
#
sub schedule
{
	my $sub = shift @_;
	my $pid = fork();

	$SIG{CHLD} = "IGNORE";
	if (!defined($pid)) {
		die "[$$] Could not schedule subprocess: $!";
		return 0;
	} elsif ($pid == 0) {
		&$sub(@_);
		exit(0);
	}
}

sub audio_file_for
{
	my($dir, $file) = (shift(@_) =~ m{(.*)/(.*)\.txt$});
	my @a = File::Find::Rule->file()->not_name("*.txt")->
	        not_name("*.m3u")->name("$file.*")->in($dir);
	return shift @a;
}

sub index_rebuild
{
	my $idxfile = shift @_;
	local(*DB, *FH);
	my @audio = File::Find::Rule->file()->in(".");
	my $FB = [];

	print "[$$] Rebuilding index\n";
	foreach my $file (@audio) {
		my $ext = substr($file, 0, -4);
		if ($ext eq ".txt" || $ext eq ".m3u") {
			next;
		}
		push(@$FB, {title => $file, file => $file, ofs => 0});
	}

	foreach my $file (grep(/\.txt$/, @audio)) {
		my $af = &audio_file_for($file);
		my $vbr;
		if (!defined($af)) {
			print "[$$]  \\__ No audio for $file\n";
			next;
		}
		if (!open(FH, "< $file")) {
			next;
		}
		while (defined(my $line = <FH>)) {
			chomp $line;
			if ($line =~ m{^<<VBR>>}) {
				$vbr = 1;
				next;
			}
			my($h, $m, $s, $title) =
			    ($line =~ m{^\[\s*(?:(\d+):)?(\d+):(\d+)\]\s+(.+)});
			if (!defined($title)) {
				next;
			}
			$s = $h * 3600 + $m * 60 + $s;
			my $entry = {
				title => "$af $title",
				file => $af,
				ofs => $s,
			};
			if ($vbr) {
				$entry->{vbr} = 1;
			}
			push(@$FB, $entry);
		}
		close FH;
	}

	if (!open(DB, "> $idxfile")) {
		die "[$$] Could not write to $idxfile: $!\n";
	}
	my $dd = Data::Dumper->new([$FB]);
	print DB $dd->Dump();
	close DB;
	return $FB;
}

sub index_read
{
	my $idxfile = shift @_;
	local *DB;
	my $VAR1;

	if (!open(DB, "< $idxfile")) {
		die "[$$] Could not read from $idxfile: $!\n";
	}
	eval join("", <DB>);
	close DB;
	return $VAR1;
}

sub s_random
{
	return int(rand 2) ? 1 - (int(rand(256 ** 4)) % 3) :
	       ((time() ^ $$ ^ int(rand(256 ** 4))) % 3) - 1;
}
