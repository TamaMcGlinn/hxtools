#!/usr/bin/perl -w
#
#	pmap_dirty
#	written by Jan Engelhardt <jengelh [at] medozas de>, 2006 - 2007
#	http://jengelh.medozas.de/
#	released in the Public Domain
#
# Usage: pmap_dirty [pid...]
#
# Ex: pmap_dirty
#	 pmap_dirty $$
#	 pmap_dirty `pidof init` `pidof java`
#
use Getopt::Long;
use strict;

my $Use_bytes;
my $Use_du_style;
&Getopt::Long::Configure(qw(bundling));
&GetOptions("b" => \$Use_bytes, "s" => \$Use_du_style);

my $total_dirty = 0;

if (scalar(@ARGV) == 0) {
	@ARGV = sort { $a <=> $b } map {
		$_ = ($_ =~ m{^/proc/(\d+)$})[0];
		(!defined($_) || $_ eq "") ? () : $_
	} glob("/proc/*");
}

foreach my $pid (@ARGV) {
	my $proc_name;
	my $fh;
	open($fh, "pmap $pid |");
	<$fh>;
	<$fh>;

	my $proc_dirty = 0;
	while (my($start, $size, $rss, $dirty) = split(/\s+/, <$fh>)) {
		if (substr($start, 0, 6) eq "Total:") {
			last;
		}
		$proc_dirty += ($dirty =~ /(\d+)/)[0];
	}

	close $fh;
	if (open($fh, "</proc/$pid/stat")) {
		($proc_name) = (<$fh> =~ /^.*?\((.*)\)/);
		close $fh;
	}

	&print_one("$pid($proc_name)", $proc_dirty);
	$total_dirty += $proc_dirty;
}

&print_one("Total", $total_dirty);

sub print_one
{
	my($text, $size) = @_;
	if ($Use_bytes) {
		$size *= 1024;
	} else {
		$size .= "K";
	}
	if ($Use_du_style) {
		printf "%-10s\t%s\n", $size, $text;
	} else {
		print $text, ": ", $size, "\n";
	}
}
