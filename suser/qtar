#!/usr/bin/perl
#
#	quicker tar + better defaults
#	Author: Jan Engelhardt, 2007-2010, placed into the Public Domain
#	Achieve higher compression by using dedicated file sorting
#	to put similar blocks next to each other.
#

use File::Find;
use Getopt::Long;
use IPC::Open2;
use strict;

my @excludes = ();
my $strategy = "by_normal";
my $packer = undef;
my @result;
&main();

sub main
{
	Getopt::Long::Configure(qw(bundling pass_through));
	GetOptions(
		"x"   => sub { push(@excludes, qr{(?:^|/)(?:\.git|\.svn|\.hg|CVS)(?:/|$)}); },
		"svn" => sub { $strategy = "by_basename";  }, # lame alias I agree
		"ext" => sub { $strategy = "by_extension"; },
		"use=s" => sub { $packer = $_[1]; },
	);

	if (scalar(@ARGV) == 0) {
		die "No output file. What gives?\n";
	} elsif (scalar(@ARGV) == 1) {
		die "No input directories. What gives?\n";
	}

	my $archive = shift @ARGV;
	if (!defined($packer)) {
		if (substr($archive, -3, 3) eq ".xz") {
			$packer = "xz";
		} elsif (substr($archive, -4, 4) eq ".bz2") {
			$packer = "bzip2";
		} elsif (substr($archive, -3, 3) eq ".gz") {
			$packer = "gzip";
		} elsif (substr($archive, -4, 4) eq ".tar") {
			$packer = undef;
		} else {
			$packer = "xz";
		}
	}

	find({
		wanted => \&collect,
		no_chdir => 1,
	}, grep /^[^-]/, @ARGV);
	@ARGV   = grep /^-/, @ARGV;
	@result = sort $strategy @result;

	&push_files($archive, \@result, \@ARGV);
}

sub by_normal
{
	return $a cmp $b;
}

sub by_basename
{
	my($p, $q) = ($a, $b);
	$p =~ s{.*/}{}g;
	$q =~ s{.*/}{}g;
	return $p cmp $q;
}

sub by_extension
{
	my($p, $q) = ($a, $b);
	$p =~ s{.*\.(\w+)$}{$1};
	$q =~ s{.*\.(\w+)$}{$1};
	return $p cmp $q;
}

sub collect
{
	foreach my $regex (@excludes) {
		if ($_ =~ $regex) {
			return;
		}
	}
	push(@result, $_);
}

sub push_files
{
	local *COUT;
	my @args = (
		"tar", "-T-", "--null",
		defined($packer) ? "--use=$packer" : (),
		"--no-recursion", "--owner=root", "--group=root",
		"-cvf", $_[0], @{$_[2]},
	);

	if (!open(\*COUT, "|-", @args)) {
		die "Could not run tar: $!\n";
	}
	print COUT join("\x00", @{$_[1]});
	close COUT;
	return 0;
}
